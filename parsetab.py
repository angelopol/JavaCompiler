
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNleftPLUSMINUSleftMULTDIVrightUMINUSABSTRACT AND ASSERT ASSIGN BOOLEAN BREAK BYTE CADENA CASE CATCH CHAR CLASS COMMA CONST CONTINUE DECREMENT DEFAULT DIV DO DOUBLE DOUBLE_QUOTE ELSE ENTERO ENUM EQUALS EXTENDS FINAL FINALLY FLOAT FLOAT_LITERAL FOR GOTO GREATER_THAN IDENTIFICADOR IF IMPLEMENTS IMPORT INCREMENT INSTANCEOF INT INTERFACE LBRACE LBRACKET LESS_THAN LONG LPAREN MINUS MOD MULT NATIVE NEW NOT OR PACKAGE PLUS PRIVATE PROTECTED PUBLIC RBRACE RBRACKET RETURN RPAREN SEMICOLON SHORT STATIC STRICTFP STRING SUPER SWITCH SYNCHRONIZED THIS THROW THROWS TRANSIENT TRY VOID VOLATILE WHILEprogram : declaraciones\n    declaraciones : declaraciones declaracion\n                  | declaracion\n    declaracion : tipo IDENTIFICADOR ASSIGN expresion SEMICOLONdeclaracion : IDENTIFICADOR ASSIGN expresion SEMICOLON\n    declaracion : IF LPAREN expresion RPAREN bloque\n                | IF LPAREN expresion RPAREN bloque ELSE bloque\n    declaracion : WHILE LPAREN expresion RPAREN bloque\n    bloque : LBRACE declaraciones RBRACE\n           | LBRACE RBRACE\n    \n    tipo : INT\n         | FLOAT\n         | BOOLEAN\n         | CHAR\n         | STRING\n    \n    expresion : expresion PLUS expresion\n              | expresion MINUS expresion\n              | expresion MULT expresion\n              | expresion DIV expresion\n    expresion : MINUS expresion %prec UMINUSexpresion : LPAREN expresion RPAREN\n    expresion : ENTERO\n              | FLOAT_LITERAL\n              | CADENA\n    expresion : IDENTIFICADOR\n    expresion : expresion EQUALS expresion\n    declaracion : IDENTIFICADOR INCREMENT SEMICOLON'
    
_lr_action_items = {'IDENTIFICADOR':([0,2,3,4,8,9,10,11,12,13,15,17,18,19,22,23,27,31,32,33,34,35,36,41,48,49,50,52,53,54,55,],[5,5,-3,14,-11,-12,-13,-14,-15,-2,20,20,20,20,20,20,-27,-5,20,20,20,20,20,-4,-6,5,-8,5,-10,-7,-9,]),'IF':([0,2,3,13,27,31,41,48,49,50,52,53,54,55,],[6,6,-3,-2,-27,-5,-4,-6,6,-8,6,-10,-7,-9,]),'WHILE':([0,2,3,13,27,31,41,48,49,50,52,53,54,55,],[7,7,-3,-2,-27,-5,-4,-6,7,-8,7,-10,-7,-9,]),'INT':([0,2,3,13,27,31,41,48,49,50,52,53,54,55,],[8,8,-3,-2,-27,-5,-4,-6,8,-8,8,-10,-7,-9,]),'FLOAT':([0,2,3,13,27,31,41,48,49,50,52,53,54,55,],[9,9,-3,-2,-27,-5,-4,-6,9,-8,9,-10,-7,-9,]),'BOOLEAN':([0,2,3,13,27,31,41,48,49,50,52,53,54,55,],[10,10,-3,-2,-27,-5,-4,-6,10,-8,10,-10,-7,-9,]),'CHAR':([0,2,3,13,27,31,41,48,49,50,52,53,54,55,],[11,11,-3,-2,-27,-5,-4,-6,11,-8,11,-10,-7,-9,]),'STRING':([0,2,3,13,27,31,41,48,49,50,52,53,54,55,],[12,12,-3,-2,-27,-5,-4,-6,12,-8,12,-10,-7,-9,]),'$end':([1,2,3,13,27,31,41,48,50,53,54,55,],[0,-1,-3,-2,-27,-5,-4,-6,-8,-10,-7,-9,]),'RBRACE':([3,13,27,31,41,48,49,50,52,53,54,55,],[-3,-2,-27,-5,-4,-6,53,-8,55,-10,-7,-9,]),'ASSIGN':([5,14,],[15,19,]),'INCREMENT':([5,],[16,]),'LPAREN':([6,7,15,17,18,19,22,23,32,33,34,35,36,],[17,18,23,23,23,23,23,23,23,23,23,23,23,]),'MINUS':([15,17,18,19,20,21,22,23,24,25,26,28,29,30,32,33,34,35,36,37,38,42,43,44,45,46,47,],[22,22,22,22,-25,33,22,22,-22,-23,-24,33,33,33,22,22,22,22,22,-20,33,-16,-17,-18,-19,33,-21,]),'ENTERO':([15,17,18,19,22,23,32,33,34,35,36,],[24,24,24,24,24,24,24,24,24,24,24,]),'FLOAT_LITERAL':([15,17,18,19,22,23,32,33,34,35,36,],[25,25,25,25,25,25,25,25,25,25,25,]),'CADENA':([15,17,18,19,22,23,32,33,34,35,36,],[26,26,26,26,26,26,26,26,26,26,26,]),'SEMICOLON':([16,20,21,24,25,26,30,37,42,43,44,45,46,47,],[27,-25,31,-22,-23,-24,41,-20,-16,-17,-18,-19,-26,-21,]),'PLUS':([20,21,24,25,26,28,29,30,37,38,42,43,44,45,46,47,],[-25,32,-22,-23,-24,32,32,32,-20,32,-16,-17,-18,-19,32,-21,]),'MULT':([20,21,24,25,26,28,29,30,37,38,42,43,44,45,46,47,],[-25,34,-22,-23,-24,34,34,34,-20,34,34,34,-18,-19,34,-21,]),'DIV':([20,21,24,25,26,28,29,30,37,38,42,43,44,45,46,47,],[-25,35,-22,-23,-24,35,35,35,-20,35,35,35,-18,-19,35,-21,]),'EQUALS':([20,21,24,25,26,28,29,30,37,38,42,43,44,45,46,47,],[-25,36,-22,-23,-24,36,36,36,-20,36,-16,-17,-18,-19,36,-21,]),'RPAREN':([20,24,25,26,28,29,37,38,42,43,44,45,46,47,],[-25,-22,-23,-24,39,40,-20,47,-16,-17,-18,-19,-26,-21,]),'LBRACE':([39,40,51,],[49,49,49,]),'ELSE':([48,53,55,],[51,-10,-9,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaraciones':([0,49,],[2,52,]),'declaracion':([0,2,49,52,],[3,13,3,13,]),'tipo':([0,2,49,52,],[4,4,4,4,]),'expresion':([15,17,18,19,22,23,32,33,34,35,36,],[21,28,29,30,37,38,42,43,44,45,46,]),'bloque':([39,40,51,],[48,50,54,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaraciones','program',1,'p_program','sintax.py',31),
  ('declaraciones -> declaraciones declaracion','declaraciones',2,'p_declaraciones_lista','sintax.py',36),
  ('declaraciones -> declaracion','declaraciones',1,'p_declaraciones_lista','sintax.py',37),
  ('declaracion -> tipo IDENTIFICADOR ASSIGN expresion SEMICOLON','declaracion',5,'p_declaracion_variable','sintax.py',45),
  ('declaracion -> IDENTIFICADOR ASSIGN expresion SEMICOLON','declaracion',4,'p_declaracion_asignacion','sintax.py',50),
  ('declaracion -> IF LPAREN expresion RPAREN bloque','declaracion',5,'p_declaracion_if','sintax.py',56),
  ('declaracion -> IF LPAREN expresion RPAREN bloque ELSE bloque','declaracion',7,'p_declaracion_if','sintax.py',57),
  ('declaracion -> WHILE LPAREN expresion RPAREN bloque','declaracion',5,'p_declaracion_while','sintax.py',65),
  ('bloque -> LBRACE declaraciones RBRACE','bloque',3,'p_bloque','sintax.py',70),
  ('bloque -> LBRACE RBRACE','bloque',2,'p_bloque','sintax.py',71),
  ('tipo -> INT','tipo',1,'p_tipo','sintax.py',80),
  ('tipo -> FLOAT','tipo',1,'p_tipo','sintax.py',81),
  ('tipo -> BOOLEAN','tipo',1,'p_tipo','sintax.py',82),
  ('tipo -> CHAR','tipo',1,'p_tipo','sintax.py',83),
  ('tipo -> STRING','tipo',1,'p_tipo','sintax.py',84),
  ('expresion -> expresion PLUS expresion','expresion',3,'p_expresion_operaciones','sintax.py',90),
  ('expresion -> expresion MINUS expresion','expresion',3,'p_expresion_operaciones','sintax.py',91),
  ('expresion -> expresion MULT expresion','expresion',3,'p_expresion_operaciones','sintax.py',92),
  ('expresion -> expresion DIV expresion','expresion',3,'p_expresion_operaciones','sintax.py',93),
  ('expresion -> MINUS expresion','expresion',2,'p_expresion_uminus','sintax.py',105),
  ('expresion -> LPAREN expresion RPAREN','expresion',3,'p_expresion_grupo','sintax.py',109),
  ('expresion -> ENTERO','expresion',1,'p_expresion_literal','sintax.py',114),
  ('expresion -> FLOAT_LITERAL','expresion',1,'p_expresion_literal','sintax.py',115),
  ('expresion -> CADENA','expresion',1,'p_expresion_literal','sintax.py',116),
  ('expresion -> IDENTIFICADOR','expresion',1,'p_expresion_nombre','sintax.py',121),
  ('expresion -> expresion EQUALS expresion','expresion',3,'p_expresion_comparacion','sintax.py',130),
  ('declaracion -> IDENTIFICADOR INCREMENT SEMICOLON','declaracion',3,'p_declaracion_incremento','sintax.py',135),
]
